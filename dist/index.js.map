{"version":3,"sources":["lib/utils/schema.js","lib/typedef/templates/scalars.template.js","lib/utils/string.js","lib/typedef/templates/type.template.js","lib/typedef/templates/queries.template.js","lib/constants/schema.js","lib/typedef/templates/mutations.template.js","lib/typedef/templates/index.js","lib/typedef/index.js","shards.config.js","data/typeDefs.js","lib/db.js","lib/resolvers/queries/get.template.js","lib/resolvers/queries/index.template.js","lib/resolvers/queries/index.js","lib/utils/mutations.js","lib/resolvers/mutations/create.template.js","lib/resolvers/mutations/delete.template.js","lib/resolvers/mutations/update.template.js","lib/resolvers/mutations/index.js","lib/resolvers/index.js","data/resolvers.js","index.js"],"names":["isTypeRequired","type","length","getIndent","i","propertiesLength","getPropertyType","property","Error","getCapitalized","value","charAt","toUpperCase","substring","startsWithCapitalLetter","modelName","properties","capitalizedModel","pluralize","plural","BASIC_TYPES","checkIfArrayType","name","filterArrayTypes","filter","_","setRelationsInputTypes","map","propertyName","extendedType","includes","getBaseParams","propertiesArray","filteredProperties","propertiesWithInputTypes","join","Object","entries","baseParams","getTypeDef","indent","defineTypes","models","types","scalarsTemplate","String","defineQueries","defineMutations","realm","defaultValue","validation","slug","posts","post","content","typeDefs","shardsConfig","console","info","MONGO_URI","process","env","MONGODB_URI","client","MongoClient","connect","useUnifiedTopology","generateCollections","db","collections","keys","forEach","model","pluralModel","capitalizedPluralModel","collection","getCollections","then","id","record","findOne","createdAt","_id","getTimestamp","find","toArray","performValidation","validationFunction","ValidationError","getPropertyValueOrDefault","propertyValue","propertyPresent","beforeTransaction","args","propertySettings","updatedAt","toISOString","ops","first","insertOne","findOneAndDelete","updateParams","findOneAndUpdate","$set","returnOriginal","generateQueries","queries","modelsKeys","generateMutations","mutations","getResolvers","Query","Mutation","PORT","resolvers","server","ApolloServer","app","Koa","applyMiddleware","listen"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["export const isTypeRequired = type => type[type.length - 1] === '!'\n\nexport const getIndent = (i, propertiesLength) => {\n  const lastEntry = propertiesLength - 1\n  if (i !== lastEntry) return '\\n    '\n  return ''\n}\n\nexport const getPropertyType = property => {\n  if (typeof property === 'string') {\n    return property\n  }\n  if (typeof property === 'object') {\n    if ('type' in property) return property.type\n  }\n  throw new Error('Property has no type')\n}\n","export default `\n  scalar DateTime\n`\n","export const getCapitalized = value => (\n  value.charAt(0).toUpperCase() + value.substring(1)\n)\n\nexport const startsWithCapitalLetter = value => (\n  value[0] === getCapitalized(value)[0]\n)\n","import { getCapitalized } from '../../utils/string'\n\nexport default (modelName, properties) => `\n  type ${getCapitalized(modelName)} {\n    _id: String!\n    ${properties}\n    createdAt: DateTime!\n    updatedAt: DateTime!\n  }\n`\n","import { getCapitalized } from '../../utils/string'\nimport pluralize from 'pluralize'\n\nexport default modelName => {\n  const capitalizedModel = getCapitalized(modelName)\n  const capitalizedPluralModel = pluralize.plural(capitalizedModel)\n  return `get${capitalizedPluralModel}: [${capitalizedModel}]\n    get${capitalizedModel}(id: String!): ${capitalizedModel}`\n}\n","export const BASIC_TYPES = [\n  'String',\n  'Int',\n  'Float',\n  'Boolean',\n  'ID',\n  'String!',\n  'Int!',\n  'Float!',\n  'Boolean!',\n  'ID!'\n]\n","import { getCapitalized, startsWithCapitalLetter } from '../../utils/string'\nimport { isTypeRequired, getPropertyType } from '../../utils/schema'\nimport { BASIC_TYPES } from '../../constants/schema'\n\nconst checkIfArrayType = name => name[0] !== '[' && name[name.length - 1] !== ']'\n\nconst filterArrayTypes = properties => {\n  return properties.filter(([_, type]) => checkIfArrayType(getPropertyType(type)))\n}\n\nconst setRelationsInputTypes = properties => properties.map(property => {\n  const [propertyName, type] = property\n  const extendedType = getPropertyType(type)\n  if (BASIC_TYPES.includes(extendedType)) return property\n  if (!startsWithCapitalLetter(extendedType)) return property\n  const relationInputProperty = `${propertyName}Id`\n  const relationType = `String${isTypeRequired(extendedType) ? '!' : ''}`\n  return [relationInputProperty, relationType]\n})\n\nconst getBaseParams = propertiesArray => {\n  const filteredProperties = filterArrayTypes(propertiesArray)\n  const propertiesWithInputTypes = setRelationsInputTypes(filteredProperties)\n  return propertiesWithInputTypes.map(([propertyName, type]) => {\n    const extendedType = getPropertyType(type)\n    return `${propertyName}: ${extendedType}`\n  }).join(', ')\n}\n\nexport default (modelName, properties) => {\n  const capitalizedModel = getCapitalized(modelName)\n  const propertiesArray = Object.entries(properties)\n  const baseParams = getBaseParams(propertiesArray)\n  return `create${capitalizedModel}(${baseParams}): ${capitalizedModel}\n    update${capitalizedModel}(id: String!, ${baseParams}): ${capitalizedModel}\n    delete${capitalizedModel}(id: String!): ${capitalizedModel}`\n}\n","import scalarsTemplate from './scalars.template'\nimport typeTemplate from './type.template'\nimport queriesTemplate from './queries.template'\nimport mutationsTemplate from './mutations.template'\n\nexport {\n  scalarsTemplate,\n  typeTemplate,\n  queriesTemplate,\n  mutationsTemplate\n}\n","import { getIndent, getPropertyType } from '../utils/schema'\n\nimport {\n  scalarsTemplate,\n  typeTemplate,\n  queriesTemplate,\n  mutationsTemplate\n} from './templates'\n\nconst getTypeDef = (modelName, propertiesArray) => {\n  return typeTemplate(modelName,\n    propertiesArray.map((property, i) => {\n      const indent = getIndent(i, propertiesArray.length)\n      const [propertyName, type] = property\n      const extendedType = getPropertyType(type)\n      return `${propertyName}: ${extendedType}${indent}`\n    }).join('') // To get rid of ,\n  )\n}\n\nexport const defineTypes = models => {\n  let types = scalarsTemplate\n  for (let [modelName, properties] of Object.entries(models)) {\n    const propertiesArray = Object.entries(properties)\n    types = String([\n      types,\n      getTypeDef(modelName, propertiesArray)\n    ].join(''))\n  }\n  return types\n}\n\nexport const defineQueries = models => `\n  type Query {\n    ${Object.entries(models).map(([modelName]) => (\n  queriesTemplate(modelName)\n)).join('\\n    ')}\n  }\n`\n\nexport const defineMutations = models => `\n  type Mutation {\n    ${Object.entries(models).map(([modelName, properties]) => (\n  mutationsTemplate(modelName, properties)\n)).join('\\n    ')}\n  }\n`\n","export default {\n  models: {\n    realm: {\n      name: {\n        type: 'String',\n        defaultValue: 'IDK',\n        validation: value => value.length > 3\n      },\n      slug: {\n        type: 'String!',\n        validation: value => value.length > 3\n      },\n      posts: '[Post]'\n    },\n    post: {\n      content: 'String!',\n      realm: 'Realm!'\n    }\n  }\n}\n","import { defineTypes, defineQueries, defineMutations } from '../lib/typedef'\nimport shardsConfig from '../shards.config'\n\nconst models = shardsConfig.models\n\nconst typeDefs = String([\n  defineTypes(models),\n  defineQueries(models),\n  defineMutations(models)\n].join(''))\n\nconsole.info('>>> API Schema \\n', typeDefs)\n\nexport default typeDefs\n","import { MongoClient } from 'mongodb'\nimport pluralize from 'pluralize'\nimport { getCapitalized } from './utils/string'\nimport shardsConfig from '../shards.config'\n\nconst models = shardsConfig.models\n\nconst MONGO_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/shards'\n\nconst client = MongoClient.connect(\n  MONGO_URI,\n  { useUnifiedTopology: true }\n)\n\nconst generateCollections = db => {\n  const collections = []\n  Object.keys(models).forEach(model => {\n    const pluralModel = pluralize.plural(model)\n    const capitalizedPluralModel = getCapitalized(pluralModel)\n    collections[pluralModel] = db.collection(capitalizedPluralModel)\n  })\n  return collections\n}\n\nexport const getCollections = () => (\n  client.then(client => {\n    const db = client.db()\n    return generateCollections(db)\n  })\n)\n","import { ObjectId } from 'mongodb'\n\nexport default collection => {\n  return async (_, { id }) => {\n    const record = await collection.findOne(ObjectId(id))\n    const createdAt = ObjectId(record._id).getTimestamp()\n    return {\n      ...record,\n      createdAt\n    }\n  }\n}\n","export default collection => {\n  return async () => collection.find().toArray()\n}\n","import getTemplate from './get.template'\nimport indexTemplate from './index.template'\n\nexport {\n  getTemplate,\n  indexTemplate\n}\n","import { ValidationError } from 'apollo-server-koa'\n\nexport const performValidation = (propertyName, value, validationFunction) => {\n  if (!validationFunction) return\n  const valueValid = validationFunction(value)\n  if (!valueValid) throw new ValidationError(`${propertyName} is invalid.`)\n}\n\nexport const getPropertyValueOrDefault = (propertyValue, defaultValue) => {\n  if (!defaultValue) return propertyValue\n  const propertyPresent = propertyValue && propertyValue.length > 0\n  return propertyPresent ? propertyValue : defaultValue\n}\n","import dayjs from 'dayjs'\nimport { performValidation, getPropertyValueOrDefault } from '../../utils/mutations'\n\nconst beforeTransaction = (model, args) => {\n  const iterableProperties = Object.entries(model)\n  iterableProperties.forEach(([propertyName, propertySettings]) => {\n    if (propertySettings) {\n      const propertyValue = args[propertyName]\n      performValidation(propertyName, propertyValue, propertySettings.validation)\n      args[propertyName] = getPropertyValueOrDefault(\n        args[propertyName],\n        propertySettings.defaultValue\n      )\n    }\n  })\n}\n\nexport default (collection, model) => {\n  return async (_, args) => {\n    beforeTransaction(model, args)\n    args.updatedAt = dayjs().toISOString()\n    const { ops: [first] } = await collection.insertOne(args)\n    return first\n  }\n}\n","import { ObjectId } from 'mongodb'\n\nexport default collection => {\n  return async (_, { id }) => {\n    const { value } = await collection.findOneAndDelete(\n      { _id: ObjectId(id) }\n    )\n    return value\n  }\n}\n","import dayjs from 'dayjs'\nimport { ObjectId } from 'mongodb'\nimport { performValidation } from '../../utils/mutations'\n\nconst beforeTransaction = (model, args) => {\n  const iterableProperties = Object.entries(model)\n  iterableProperties.forEach(([propertyName, propertySettings]) => {\n    if (propertySettings) {\n      const propertyValue = args[propertyName]\n      performValidation(propertyName, propertyValue, propertySettings.validation)\n    }\n  })\n}\n\nexport default (collection, model) => {\n  return async (_, { id, ...updateParams }) => {\n    beforeTransaction(model, updateParams)\n    updateParams.updatedAt = dayjs().toISOString()\n    const { value } = await collection.findOneAndUpdate(\n      { _id: ObjectId(id) },\n      { $set: updateParams },\n      { returnOriginal: false }\n    )\n    return value\n  }\n}\n","import createTemplate from './create.template.js'\nimport deleteTemplate from './delete.template.js'\nimport updateTemplate from './update.template.js'\n\nexport {\n  createTemplate,\n  deleteTemplate,\n  updateTemplate\n}\n","import pluralize from 'pluralize'\nimport { getCapitalized } from '../utils/string'\nimport { getCollections } from '../../lib/db'\nimport shardsConfig from '../../shards.config'\n\nconst models = shardsConfig.models\n\nimport { getTemplate, indexTemplate } from './queries'\nimport {\n  createTemplate,\n  updateTemplate,\n  deleteTemplate\n} from './mutations'\n\nexport const generateQueries = async () => {\n  const queries = {}\n  const modelsKeys = Object.keys(models)\n  for (const model of modelsKeys) {\n    const capitalizedModel = getCapitalized(model)\n    const pluralModel = pluralize.plural(model)\n    const capitalizedPluralModel = getCapitalized(pluralModel)\n    const collection = (await getCollections())[pluralModel]\n    queries[`get${capitalizedPluralModel}`] = indexTemplate(collection)\n    queries[`get${capitalizedModel}`] = getTemplate(collection)\n  }\n  return queries\n}\n\nexport const generateMutations = async () => {\n  const mutations = {}\n  const modelsKeys = Object.keys(models)\n  for (const model of modelsKeys) {\n    const pluralModel = pluralize.plural(model)\n    const capitalizedModel = getCapitalized(model)\n    const collection = (await getCollections())[pluralModel]\n    mutations[`create${capitalizedModel}`] = createTemplate(collection, models[model])\n    mutations[`update${capitalizedModel}`] = updateTemplate(collection, models[model])\n    mutations[`delete${capitalizedModel}`] = deleteTemplate(collection)\n  }\n  return mutations\n}\n","import { generateQueries, generateMutations } from '../lib/resolvers'\n\nconst getResolvers = async () => {\n  return {\n    Query: await generateQueries(),\n    Mutation: await generateMutations()\n  }\n}\n\nexport default getResolvers\n","import Koa from 'koa'\nimport { ApolloServer } from 'apollo-server-koa'\n\nconst PORT = process.env.PORT || 1337\n\nimport typeDefs from './data/typeDefs'\nimport getResolvers from './data/resolvers'\n\ngetResolvers().then(resolvers => {\n  const server = new ApolloServer({\n    typeDefs,\n    resolvers: resolvers\n  })\n  const app = new Koa()\n  server.applyMiddleware({ app })\n  app.listen(PORT)\n})\n"]}